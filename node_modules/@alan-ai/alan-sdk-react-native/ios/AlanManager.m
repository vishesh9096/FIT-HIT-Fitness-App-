#import "AlanManager.h"
#import "AlanSDK.h"

@implementation AlanManager

RCT_EXPORT_MODULE();

- (dispatch_queue_t)methodQueue
{
    return dispatch_get_main_queue();
}

+ (instancetype)shared
{
    static AlanManager *shared = nil;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        shared = [[self alloc] init];
        [AlanLog setEnableLogging:NO];
    });
    return shared;
}

RCT_EXPORT_METHOD(sendText:(NSString *)text)
{
    if( AlanManager.shared.alanButton == nil )
    {
        return;
    }
    [AlanManager.shared.alanButton sendText:text];
}

RCT_EXPORT_METHOD(playText:(NSString *)text)
{
    if( AlanManager.shared.alanButton == nil )
    {
        return;
    }
    [AlanManager.shared.alanButton playText:text];
}

RCT_EXPORT_METHOD(playCommand:(NSDictionary *)data)
{
    if( AlanManager.shared.alanButton == nil )
    {
        return;
    }
    [AlanManager.shared.alanButton playCommand:data];
}

RCT_EXPORT_METHOD(showButton)
{
    if( AlanManager.shared.alanButton == nil )
    {
        return;
    }
    AlanManager.shared.alanButton.hidden = NO;
}

RCT_EXPORT_METHOD(hideButton)
{
    if( AlanManager.shared.alanButton == nil )
    {
        return;
    }
    AlanManager.shared.alanButton.hidden = YES;
}

RCT_EXPORT_METHOD(callProjectApi:(NSString*)method withData:(NSDictionary*)data callback:(RCTResponseSenderBlock)callback)
{
    if( AlanManager.shared.alanButton == nil )
    {
        return;
    }
    [AlanManager.shared.alanButton callProjectApi:method withData:data callback:^(NSError *error, NSString *object) {
        if( error )
        {
            callback(@[error, [NSNull null]]);
        }
        else
        {
            callback(@[[NSNull null], object]);
        }
    }];
}

RCT_EXPORT_METHOD(setVisualState:(NSDictionary*)visual)
{
    if( AlanManager.shared.alanButton == nil )
    {
        return;
    }
    [AlanManager.shared.alanButton setVisualState:visual];
}

RCT_EXPORT_METHOD(activate)
{
    if( AlanManager.shared.alanButton == nil )
    {
        return;
    }
    [AlanManager.shared.alanButton activate];
}

RCT_EXPORT_METHOD(deactivate)
{
    if( AlanManager.shared.alanButton == nil )
    {
        return;
    }
    [AlanManager.shared.alanButton deactivate];
}

RCT_EXPORT_METHOD(isActive:(RCTResponseSenderBlock)callback)
{
    if( AlanManager.shared.alanButton == nil )
    {
        return;
    }
    BOOL isActive = [AlanManager.shared.alanButton isActive];
    callback(@[[NSNull null], [NSNumber numberWithBool:isActive]]);
}

RCT_EXPORT_METHOD(setWakewordEnabled:(BOOL)enabled)
{
    if( AlanManager.shared.alanButton == nil )
    {
        return;
    }
    [AlanManager.shared.alanButton setWakewordEnabled:enabled];
}

RCT_EXPORT_METHOD(getWakewordEnabled:(RCTResponseSenderBlock)callback)
{
    if( AlanManager.shared.alanButton == nil )
    {
        return;
    }
    BOOL enabled = [AlanManager.shared.alanButton getWakewordEnabled];
    callback(@[[NSNull null], [NSNumber numberWithBool:enabled]]);
}

@end
